from pathlib import Path
from mutagen import FileType
from soundfile import SoundFile
from io import BytesIO, BufferedReader, BufferedRandom
# > Typing
from typing import Type, Union, Optional, Tuple
# > Local Imports
from .units import DEFAULT_SOUND_FONTS_PATH
from .streamers import DEFAULT_STREAMER, StreamerBase

# ! Types
FPType = Union[str, Path, bytes, BytesIO, BufferedReader, BufferedRandom]
MutagenFile = FileType

# ! Hidden Functions For Class
def opener(fp: FPType) -> Tuple[Optional[str], SoundFile, MutagenFile, bool]: ...
def getfp(fp: FPType, filetype: str=".bin") -> Tuple[str, bool]: ...

# ! Sound Functions
def get_icon_data(mutagen_class: MutagenFile) -> Optional[bytes]: ...
def is_midi_file(filepath: str) -> bool: ...

# ! Main Class
class Sound():
    def __init__(
        self,
        fp: FPType,
        dtype: str="float32",
        volume: float=1.0,
        streamer: Optional[Type[StreamerBase]]=DEFAULT_STREAMER,
        is_temp: bool=False,
        **kwargs
    ) -> None: ...
    
    # ! Propertyes
    @property
    def playing(self) -> bool: ...
    @property
    def paused(self) -> bool: ...
    @property
    def samplerate(self) -> int: ...
    @property
    def duration(self) -> float: ...
    @property
    def name(self) -> Optional[str]: ...
    @property
    def bit_depth(self) -> int: ...
    @property
    def bitrate(self) -> int: ...
    @property
    def channels(self) -> int: ...
    @property
    def title(self) -> Optional[str]: ...
    @property
    def artist(self) -> Optional[str]: ...
    @property
    def album(self) -> Optional[str]: ...
    @property
    def year(self) -> Optional[str]: ...
    @property
    def icon_data(self) -> Optional[bytes]: ...
    
    # ! Variants
    @staticmethod
    def from_midi(fp: FPType, sound_fonts_path: str=DEFAULT_SOUND_FONTS_PATH, **kwargs): ...
    
    # ! Streaming Functions
    def _check_pause(self) -> None: ...
    
    # ! Streaming
    def __streaming__(self, mode: int) -> None: ...
    
    # ! Control Functions
    def get_volume(self) -> float: ...
    def set_volume(self, volume: float) -> None: ...
    def get_position(self) -> float: ...
    def set_position(self, value: float) -> None: ...
    def pause(self) -> None: ...
    def unpause(self) -> None: ...
    def play(self, mode: int=1) -> None: ...
    def stop(self) -> None: ...
    def wait(self) -> None: ...
