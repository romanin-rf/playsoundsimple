from io import BufferedReader, BytesIO
from typing import overload, List, Optional, Union
from dataclasses import dataclass

SoundFP = Union[str, bytes, BufferedReader, BytesIO]

@dataclass
class Device:
    name: str
    device_id: int
    samplerate: float

def get_devices() -> List[Device]: ...
def is_midi_file(filepath: str) -> bool: ...

class Sound:
    @overload
    def __init__(self, fp: str, **kwargs) -> None: ...
    @overload
    def __init__(self, fp: bytes, **kwargs) -> None: ...
    @overload
    def __init__(self, fp: BufferedReader, **kwargs) -> None: ...
    @overload
    def __init__(self, fp: BytesIO, **kwargs) -> None: ...

    @overload
    @staticmethod
    def from_midi(fp: str, **kwargs) -> Sound: ...
    @overload
    @staticmethod
    def from_midi(fp: bytes, **kwargs) -> Sound: ...
    @overload
    @staticmethod
    def from_midi(fp: BufferedReader, **kwargs) -> Sound: ...
    @overload
    @staticmethod
    def from_midi(fp: BytesIO, **kwargs) -> Sound: ...

    @property
    def playing(self) -> bool: ...
    @property
    def paused(self) -> bool: ...
    @property
    def samplerate(self) -> int: ...
    @property
    def duration(self) -> float: ...
    @property
    def name(self) -> str: ...
    @property
    def bit_depth(self) -> int: ...
    @property
    def bitrate(self) -> int: ...
    @property
    def channels(self) -> int: ...
    @property
    def title(self) -> Optional[str]: ...
    @property
    def artist(self) -> Optional[str]: ...
    @property
    def album(self) -> Optional[str]: ...
    @property
    def icon_data(self) -> Optional[bytes]: ...

    def play(self, mode: int=1) -> None: ...
    def stop(self) -> None: ...
    def pause(self) -> None: ...
    def unpause(self) -> None: ...
    def get_pos(self) -> float: ...
    def set_pos(self, value: float) -> None: ...
    def get_volume(self) -> float: ...
    def set_volume(self, value: float) -> None: ...
    def wait(self) -> None: ...